// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package evmv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_TraceConfig                    protoreflect.MessageDescriptor
	fd_TraceConfig_tracer             protoreflect.FieldDescriptor
	fd_TraceConfig_timeout            protoreflect.FieldDescriptor
	fd_TraceConfig_reexec             protoreflect.FieldDescriptor
	fd_TraceConfig_disable_stack      protoreflect.FieldDescriptor
	fd_TraceConfig_disable_storage    protoreflect.FieldDescriptor
	fd_TraceConfig_debug              protoreflect.FieldDescriptor
	fd_TraceConfig_limit              protoreflect.FieldDescriptor
	fd_TraceConfig_overrides          protoreflect.FieldDescriptor
	fd_TraceConfig_enable_memory      protoreflect.FieldDescriptor
	fd_TraceConfig_enable_return_data protoreflect.FieldDescriptor
	fd_TraceConfig_tracer_json_config protoreflect.FieldDescriptor
	fd_TraceConfig_state_overrides    protoreflect.FieldDescriptor
	fd_TraceConfig_block_overrides    protoreflect.FieldDescriptor
)

func init() {
	file_ethermint_evm_v1_trace_config_proto_init()
	md_TraceConfig = File_ethermint_evm_v1_trace_config_proto.Messages().ByName("TraceConfig")
	fd_TraceConfig_tracer = md_TraceConfig.Fields().ByName("tracer")
	fd_TraceConfig_timeout = md_TraceConfig.Fields().ByName("timeout")
	fd_TraceConfig_reexec = md_TraceConfig.Fields().ByName("reexec")
	fd_TraceConfig_disable_stack = md_TraceConfig.Fields().ByName("disable_stack")
	fd_TraceConfig_disable_storage = md_TraceConfig.Fields().ByName("disable_storage")
	fd_TraceConfig_debug = md_TraceConfig.Fields().ByName("debug")
	fd_TraceConfig_limit = md_TraceConfig.Fields().ByName("limit")
	fd_TraceConfig_overrides = md_TraceConfig.Fields().ByName("overrides")
	fd_TraceConfig_enable_memory = md_TraceConfig.Fields().ByName("enable_memory")
	fd_TraceConfig_enable_return_data = md_TraceConfig.Fields().ByName("enable_return_data")
	fd_TraceConfig_tracer_json_config = md_TraceConfig.Fields().ByName("tracer_json_config")
	fd_TraceConfig_state_overrides = md_TraceConfig.Fields().ByName("state_overrides")
	fd_TraceConfig_block_overrides = md_TraceConfig.Fields().ByName("block_overrides")
}

var _ protoreflect.Message = (*fastReflection_TraceConfig)(nil)

type fastReflection_TraceConfig TraceConfig

func (x *TraceConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TraceConfig)(x)
}

func (x *TraceConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_ethermint_evm_v1_trace_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TraceConfig_messageType fastReflection_TraceConfig_messageType
var _ protoreflect.MessageType = fastReflection_TraceConfig_messageType{}

type fastReflection_TraceConfig_messageType struct{}

func (x fastReflection_TraceConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TraceConfig)(nil)
}
func (x fastReflection_TraceConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_TraceConfig)
}
func (x fastReflection_TraceConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TraceConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TraceConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_TraceConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TraceConfig) Type() protoreflect.MessageType {
	return _fastReflection_TraceConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TraceConfig) New() protoreflect.Message {
	return new(fastReflection_TraceConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TraceConfig) Interface() protoreflect.ProtoMessage {
	return (*TraceConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TraceConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Tracer != "" {
		value := protoreflect.ValueOfString(x.Tracer)
		if !f(fd_TraceConfig_tracer, value) {
			return
		}
	}
	if x.Timeout != "" {
		value := protoreflect.ValueOfString(x.Timeout)
		if !f(fd_TraceConfig_timeout, value) {
			return
		}
	}
	if x.Reexec != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Reexec)
		if !f(fd_TraceConfig_reexec, value) {
			return
		}
	}
	if x.DisableStack != false {
		value := protoreflect.ValueOfBool(x.DisableStack)
		if !f(fd_TraceConfig_disable_stack, value) {
			return
		}
	}
	if x.DisableStorage != false {
		value := protoreflect.ValueOfBool(x.DisableStorage)
		if !f(fd_TraceConfig_disable_storage, value) {
			return
		}
	}
	if x.Debug != false {
		value := protoreflect.ValueOfBool(x.Debug)
		if !f(fd_TraceConfig_debug, value) {
			return
		}
	}
	if x.Limit != int32(0) {
		value := protoreflect.ValueOfInt32(x.Limit)
		if !f(fd_TraceConfig_limit, value) {
			return
		}
	}
	if x.Overrides != nil {
		value := protoreflect.ValueOfMessage(x.Overrides.ProtoReflect())
		if !f(fd_TraceConfig_overrides, value) {
			return
		}
	}
	if x.EnableMemory != false {
		value := protoreflect.ValueOfBool(x.EnableMemory)
		if !f(fd_TraceConfig_enable_memory, value) {
			return
		}
	}
	if x.EnableReturnData != false {
		value := protoreflect.ValueOfBool(x.EnableReturnData)
		if !f(fd_TraceConfig_enable_return_data, value) {
			return
		}
	}
	if x.TracerJsonConfig != "" {
		value := protoreflect.ValueOfString(x.TracerJsonConfig)
		if !f(fd_TraceConfig_tracer_json_config, value) {
			return
		}
	}
	if len(x.StateOverrides) != 0 {
		value := protoreflect.ValueOfBytes(x.StateOverrides)
		if !f(fd_TraceConfig_state_overrides, value) {
			return
		}
	}
	if len(x.BlockOverrides) != 0 {
		value := protoreflect.ValueOfBytes(x.BlockOverrides)
		if !f(fd_TraceConfig_block_overrides, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TraceConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ethermint.evm.v1.TraceConfig.tracer":
		return x.Tracer != ""
	case "ethermint.evm.v1.TraceConfig.timeout":
		return x.Timeout != ""
	case "ethermint.evm.v1.TraceConfig.reexec":
		return x.Reexec != uint64(0)
	case "ethermint.evm.v1.TraceConfig.disable_stack":
		return x.DisableStack != false
	case "ethermint.evm.v1.TraceConfig.disable_storage":
		return x.DisableStorage != false
	case "ethermint.evm.v1.TraceConfig.debug":
		return x.Debug != false
	case "ethermint.evm.v1.TraceConfig.limit":
		return x.Limit != int32(0)
	case "ethermint.evm.v1.TraceConfig.overrides":
		return x.Overrides != nil
	case "ethermint.evm.v1.TraceConfig.enable_memory":
		return x.EnableMemory != false
	case "ethermint.evm.v1.TraceConfig.enable_return_data":
		return x.EnableReturnData != false
	case "ethermint.evm.v1.TraceConfig.tracer_json_config":
		return x.TracerJsonConfig != ""
	case "ethermint.evm.v1.TraceConfig.state_overrides":
		return len(x.StateOverrides) != 0
	case "ethermint.evm.v1.TraceConfig.block_overrides":
		return len(x.BlockOverrides) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.TraceConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.TraceConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TraceConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ethermint.evm.v1.TraceConfig.tracer":
		x.Tracer = ""
	case "ethermint.evm.v1.TraceConfig.timeout":
		x.Timeout = ""
	case "ethermint.evm.v1.TraceConfig.reexec":
		x.Reexec = uint64(0)
	case "ethermint.evm.v1.TraceConfig.disable_stack":
		x.DisableStack = false
	case "ethermint.evm.v1.TraceConfig.disable_storage":
		x.DisableStorage = false
	case "ethermint.evm.v1.TraceConfig.debug":
		x.Debug = false
	case "ethermint.evm.v1.TraceConfig.limit":
		x.Limit = int32(0)
	case "ethermint.evm.v1.TraceConfig.overrides":
		x.Overrides = nil
	case "ethermint.evm.v1.TraceConfig.enable_memory":
		x.EnableMemory = false
	case "ethermint.evm.v1.TraceConfig.enable_return_data":
		x.EnableReturnData = false
	case "ethermint.evm.v1.TraceConfig.tracer_json_config":
		x.TracerJsonConfig = ""
	case "ethermint.evm.v1.TraceConfig.state_overrides":
		x.StateOverrides = nil
	case "ethermint.evm.v1.TraceConfig.block_overrides":
		x.BlockOverrides = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.TraceConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.TraceConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TraceConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ethermint.evm.v1.TraceConfig.tracer":
		value := x.Tracer
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.TraceConfig.timeout":
		value := x.Timeout
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.TraceConfig.reexec":
		value := x.Reexec
		return protoreflect.ValueOfUint64(value)
	case "ethermint.evm.v1.TraceConfig.disable_stack":
		value := x.DisableStack
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.TraceConfig.disable_storage":
		value := x.DisableStorage
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.TraceConfig.debug":
		value := x.Debug
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.TraceConfig.limit":
		value := x.Limit
		return protoreflect.ValueOfInt32(value)
	case "ethermint.evm.v1.TraceConfig.overrides":
		value := x.Overrides
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ethermint.evm.v1.TraceConfig.enable_memory":
		value := x.EnableMemory
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.TraceConfig.enable_return_data":
		value := x.EnableReturnData
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.TraceConfig.tracer_json_config":
		value := x.TracerJsonConfig
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.TraceConfig.state_overrides":
		value := x.StateOverrides
		return protoreflect.ValueOfBytes(value)
	case "ethermint.evm.v1.TraceConfig.block_overrides":
		value := x.BlockOverrides
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.TraceConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.TraceConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TraceConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ethermint.evm.v1.TraceConfig.tracer":
		x.Tracer = value.Interface().(string)
	case "ethermint.evm.v1.TraceConfig.timeout":
		x.Timeout = value.Interface().(string)
	case "ethermint.evm.v1.TraceConfig.reexec":
		x.Reexec = value.Uint()
	case "ethermint.evm.v1.TraceConfig.disable_stack":
		x.DisableStack = value.Bool()
	case "ethermint.evm.v1.TraceConfig.disable_storage":
		x.DisableStorage = value.Bool()
	case "ethermint.evm.v1.TraceConfig.debug":
		x.Debug = value.Bool()
	case "ethermint.evm.v1.TraceConfig.limit":
		x.Limit = int32(value.Int())
	case "ethermint.evm.v1.TraceConfig.overrides":
		x.Overrides = value.Message().Interface().(*ChainConfig)
	case "ethermint.evm.v1.TraceConfig.enable_memory":
		x.EnableMemory = value.Bool()
	case "ethermint.evm.v1.TraceConfig.enable_return_data":
		x.EnableReturnData = value.Bool()
	case "ethermint.evm.v1.TraceConfig.tracer_json_config":
		x.TracerJsonConfig = value.Interface().(string)
	case "ethermint.evm.v1.TraceConfig.state_overrides":
		x.StateOverrides = value.Bytes()
	case "ethermint.evm.v1.TraceConfig.block_overrides":
		x.BlockOverrides = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.TraceConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.TraceConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TraceConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.TraceConfig.overrides":
		if x.Overrides == nil {
			x.Overrides = new(ChainConfig)
		}
		return protoreflect.ValueOfMessage(x.Overrides.ProtoReflect())
	case "ethermint.evm.v1.TraceConfig.tracer":
		panic(fmt.Errorf("field tracer of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.timeout":
		panic(fmt.Errorf("field timeout of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.reexec":
		panic(fmt.Errorf("field reexec of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.disable_stack":
		panic(fmt.Errorf("field disable_stack of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.disable_storage":
		panic(fmt.Errorf("field disable_storage of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.debug":
		panic(fmt.Errorf("field debug of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.limit":
		panic(fmt.Errorf("field limit of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.enable_memory":
		panic(fmt.Errorf("field enable_memory of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.enable_return_data":
		panic(fmt.Errorf("field enable_return_data of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.tracer_json_config":
		panic(fmt.Errorf("field tracer_json_config of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.state_overrides":
		panic(fmt.Errorf("field state_overrides of message ethermint.evm.v1.TraceConfig is not mutable"))
	case "ethermint.evm.v1.TraceConfig.block_overrides":
		panic(fmt.Errorf("field block_overrides of message ethermint.evm.v1.TraceConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.TraceConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.TraceConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TraceConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.TraceConfig.tracer":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.TraceConfig.timeout":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.TraceConfig.reexec":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ethermint.evm.v1.TraceConfig.disable_stack":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.TraceConfig.disable_storage":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.TraceConfig.debug":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.TraceConfig.limit":
		return protoreflect.ValueOfInt32(int32(0))
	case "ethermint.evm.v1.TraceConfig.overrides":
		m := new(ChainConfig)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "ethermint.evm.v1.TraceConfig.enable_memory":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.TraceConfig.enable_return_data":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.TraceConfig.tracer_json_config":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.TraceConfig.state_overrides":
		return protoreflect.ValueOfBytes(nil)
	case "ethermint.evm.v1.TraceConfig.block_overrides":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.TraceConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.TraceConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TraceConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ethermint.evm.v1.TraceConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TraceConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TraceConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TraceConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TraceConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TraceConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Tracer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Timeout)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Reexec != 0 {
			n += 1 + runtime.Sov(uint64(x.Reexec))
		}
		if x.DisableStack {
			n += 2
		}
		if x.DisableStorage {
			n += 2
		}
		if x.Debug {
			n += 2
		}
		if x.Limit != 0 {
			n += 1 + runtime.Sov(uint64(x.Limit))
		}
		if x.Overrides != nil {
			l = options.Size(x.Overrides)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EnableMemory {
			n += 2
		}
		if x.EnableReturnData {
			n += 2
		}
		l = len(x.TracerJsonConfig)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StateOverrides)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BlockOverrides)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TraceConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BlockOverrides) > 0 {
			i -= len(x.BlockOverrides)
			copy(dAtA[i:], x.BlockOverrides)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BlockOverrides)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.StateOverrides) > 0 {
			i -= len(x.StateOverrides)
			copy(dAtA[i:], x.StateOverrides)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StateOverrides)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.TracerJsonConfig) > 0 {
			i -= len(x.TracerJsonConfig)
			copy(dAtA[i:], x.TracerJsonConfig)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TracerJsonConfig)))
			i--
			dAtA[i] = 0x6a
		}
		if x.EnableReturnData {
			i--
			if x.EnableReturnData {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x60
		}
		if x.EnableMemory {
			i--
			if x.EnableMemory {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x58
		}
		if x.Overrides != nil {
			encoded, err := options.Marshal(x.Overrides)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if x.Limit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Limit))
			i--
			dAtA[i] = 0x48
		}
		if x.Debug {
			i--
			if x.Debug {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.DisableStorage {
			i--
			if x.DisableStorage {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if x.DisableStack {
			i--
			if x.DisableStack {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.Reexec != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Reexec))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Timeout) > 0 {
			i -= len(x.Timeout)
			copy(dAtA[i:], x.Timeout)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Timeout)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Tracer) > 0 {
			i -= len(x.Tracer)
			copy(dAtA[i:], x.Tracer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Tracer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TraceConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TraceConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TraceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tracer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Tracer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Timeout = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reexec", wireType)
				}
				x.Reexec = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Reexec |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisableStack", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DisableStack = bool(v != 0)
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisableStorage", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DisableStorage = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Debug = bool(v != 0)
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
				}
				x.Limit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Limit |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Overrides", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Overrides == nil {
					x.Overrides = &ChainConfig{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Overrides); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableMemory", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.EnableMemory = bool(v != 0)
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableReturnData", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.EnableReturnData = bool(v != 0)
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TracerJsonConfig", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TracerJsonConfig = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StateOverrides", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StateOverrides = append(x.StateOverrides[:0], dAtA[iNdEx:postIndex]...)
				if x.StateOverrides == nil {
					x.StateOverrides = []byte{}
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockOverrides", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BlockOverrides = append(x.BlockOverrides[:0], dAtA[iNdEx:postIndex]...)
				if x.BlockOverrides == nil {
					x.BlockOverrides = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: ethermint/evm/v1/trace_config.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TraceConfig holds extra parameters to trace functions.
type TraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tracer is a custom javascript tracer
	Tracer string `protobuf:"bytes,1,opt,name=tracer,proto3" json:"tracer,omitempty"`
	// timeout overrides the default timeout of 5 seconds for JavaScript-based tracing
	// calls
	Timeout string `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// reexec defines the number of blocks the tracer is willing to go back
	Reexec uint64 `protobuf:"varint,3,opt,name=reexec,proto3" json:"reexec,omitempty"`
	// disable_stack switches stack capture
	DisableStack bool `protobuf:"varint,5,opt,name=disable_stack,json=disableStack,proto3" json:"disable_stack,omitempty"`
	// disable_storage switches storage capture
	DisableStorage bool `protobuf:"varint,6,opt,name=disable_storage,json=disableStorage,proto3" json:"disable_storage,omitempty"`
	// debug can be used to print output during capture end
	Debug bool `protobuf:"varint,8,opt,name=debug,proto3" json:"debug,omitempty"`
	// limit defines the maximum length of output, but zero means unlimited
	Limit int32 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	// overrides can be used to execute a trace using future fork rules
	Overrides *ChainConfig `protobuf:"bytes,10,opt,name=overrides,proto3" json:"overrides,omitempty"`
	// enable_memory switches memory capture
	EnableMemory bool `protobuf:"varint,11,opt,name=enable_memory,json=enableMemory,proto3" json:"enable_memory,omitempty"`
	// enable_return_data switches the capture of return data
	EnableReturnData bool `protobuf:"varint,12,opt,name=enable_return_data,json=enableReturnData,proto3" json:"enable_return_data,omitempty"`
	// tracer_json_config configures the tracer using a JSON string
	TracerJsonConfig string `protobuf:"bytes,13,opt,name=tracer_json_config,json=tracerJsonConfig,proto3" json:"tracer_json_config,omitempty"`
	// temporary state modifications to Geth in order to simulate the effects of eth_call
	StateOverrides []byte `protobuf:"bytes,14,opt,name=state_overrides,json=stateOverrides,proto3" json:"state_overrides,omitempty"`
	// block overrides block context fields encoded as json
	BlockOverrides []byte `protobuf:"bytes,15,opt,name=block_overrides,json=blockOverrides,proto3" json:"block_overrides,omitempty"`
}

func (x *TraceConfig) Reset() {
	*x = TraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethermint_evm_v1_trace_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig) ProtoMessage() {}

// Deprecated: Use TraceConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig) Descriptor() ([]byte, []int) {
	return file_ethermint_evm_v1_trace_config_proto_rawDescGZIP(), []int{0}
}

func (x *TraceConfig) GetTracer() string {
	if x != nil {
		return x.Tracer
	}
	return ""
}

func (x *TraceConfig) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *TraceConfig) GetReexec() uint64 {
	if x != nil {
		return x.Reexec
	}
	return 0
}

func (x *TraceConfig) GetDisableStack() bool {
	if x != nil {
		return x.DisableStack
	}
	return false
}

func (x *TraceConfig) GetDisableStorage() bool {
	if x != nil {
		return x.DisableStorage
	}
	return false
}

func (x *TraceConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *TraceConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TraceConfig) GetOverrides() *ChainConfig {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *TraceConfig) GetEnableMemory() bool {
	if x != nil {
		return x.EnableMemory
	}
	return false
}

func (x *TraceConfig) GetEnableReturnData() bool {
	if x != nil {
		return x.EnableReturnData
	}
	return false
}

func (x *TraceConfig) GetTracerJsonConfig() string {
	if x != nil {
		return x.TracerJsonConfig
	}
	return ""
}

func (x *TraceConfig) GetStateOverrides() []byte {
	if x != nil {
		return x.StateOverrides
	}
	return nil
}

func (x *TraceConfig) GetBlockOverrides() []byte {
	if x != nil {
		return x.BlockOverrides
	}
	return nil
}

var File_ethermint_evm_v1_trace_config_proto protoreflect.FileDescriptor

var file_ethermint_evm_v1_trace_config_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9a, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x65, 0x78, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x65, 0x78, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0xea, 0xde,
	0x1f, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x42, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0xea, 0xde,
	0x1f, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xea,
	0xde, 0x1f, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42,
	0xb3, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x6d, 0x2f, 0x76, 0x31, 0x3b,
	0x65, 0x76, 0x6d, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x45, 0x45, 0x58, 0xaa, 0x02, 0x10, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x6d, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x10, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x5c, 0x45, 0x76, 0x6d, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1c, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x5c, 0x45, 0x76,
	0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x12, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x3a, 0x3a, 0x45, 0x76,
	0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethermint_evm_v1_trace_config_proto_rawDescOnce sync.Once
	file_ethermint_evm_v1_trace_config_proto_rawDescData = file_ethermint_evm_v1_trace_config_proto_rawDesc
)

func file_ethermint_evm_v1_trace_config_proto_rawDescGZIP() []byte {
	file_ethermint_evm_v1_trace_config_proto_rawDescOnce.Do(func() {
		file_ethermint_evm_v1_trace_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethermint_evm_v1_trace_config_proto_rawDescData)
	})
	return file_ethermint_evm_v1_trace_config_proto_rawDescData
}

var file_ethermint_evm_v1_trace_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ethermint_evm_v1_trace_config_proto_goTypes = []interface{}{
	(*TraceConfig)(nil), // 0: ethermint.evm.v1.TraceConfig
	(*ChainConfig)(nil), // 1: ethermint.evm.v1.ChainConfig
}
var file_ethermint_evm_v1_trace_config_proto_depIdxs = []int32{
	1, // 0: ethermint.evm.v1.TraceConfig.overrides:type_name -> ethermint.evm.v1.ChainConfig
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ethermint_evm_v1_trace_config_proto_init() }
func file_ethermint_evm_v1_trace_config_proto_init() {
	if File_ethermint_evm_v1_trace_config_proto != nil {
		return
	}
	file_ethermint_evm_v1_chain_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ethermint_evm_v1_trace_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethermint_evm_v1_trace_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ethermint_evm_v1_trace_config_proto_goTypes,
		DependencyIndexes: file_ethermint_evm_v1_trace_config_proto_depIdxs,
		MessageInfos:      file_ethermint_evm_v1_trace_config_proto_msgTypes,
	}.Build()
	File_ethermint_evm_v1_trace_config_proto = out.File
	file_ethermint_evm_v1_trace_config_proto_rawDesc = nil
	file_ethermint_evm_v1_trace_config_proto_goTypes = nil
	file_ethermint_evm_v1_trace_config_proto_depIdxs = nil
}
